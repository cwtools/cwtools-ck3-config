single_alias[iteration_every] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

single_alias[iteration_ordered] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

single_alias[iteration_random] = {
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### a random list effect random_list = { X1 = { trigger = { enables/disable this effect} modifier/compare_modifier/opinion_modifier = Y1 effect1 } X2 = { trigger = { enables/disable this effect} modifier/compare_modifier/opinion_modifier = Y2 effect2 } ... } Selects one effect from the list and fires it. The effects are weighted by numbers X1, X2... (the higher the number, the higher the chance of the effect being picked). The chances can be modified by optional value modifier lists Y1, Y2... (AKA MTTH)
alias[effect:random_list] = {
    ## cardinality = 2..inf
    int = {
        ## cardinality = 0..1
        trigger = {
            ## cardinality = 1..inf
            alias_name[trigger] = alias_match_left[trigger]
        }

        ## cardinality = 0..inf
        alias_name[weight] = alias_match_left[weight]

        ## cardinality = 1..inf
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..inf
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in global list. list = name or variable = name every_in_global_list = { limit = { <triggers> } <effects> }
alias[effect:every_in_global_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[global_variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in list. list = name or variable = name every_in_list = { limit = { <triggers> } <effects> }
alias[effect:every_in_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in local list. list = name or variable = name every_in_local_list = { limit = { <triggers> } <effects> }
alias[effect:every_in_local_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[local_variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in global list. list = name or variable = name ordered_in_global_list = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_in_global_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[global_variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in list. list = name or variable = name ordered_in_list = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_in_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in local list. list = name or variable = name ordered_in_local_list = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_in_local_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[local_variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in global list. list = name or variable = name random_in_global_list = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_in_global_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[global_variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in list. list = name or variable = name random_in_list = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_in_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all items in local list. list = name or variable = name random_in_local_list = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_in_local_list] = {
    ## cardinality = 0..1
    list = value[list]
    ## cardinality = 0..1
    variable = value[local_variable_list]
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through scripted relations of a given type or multiple types, if someone is multiple relations they will only be in the list once every_relation = { limit = { <triggers> } <effects> }
alias[effect:every_relation] = {
    ## cardinality = 1..inf
    type = <scripted_relation>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through scripted relations of a given type or multiple types, if someone is multiple relations they will only be in the list once ordered_relation = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_relation] = {
    ## cardinality = 1..inf
    type = <scripted_relation>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    # TODO: Work out what exactly this is restricted to
    order_by = value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    max = int_value_field
    ## cardinality = 0..1
    position = int
    ## cardinality = 0..1
    check_range_bounds = no
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through scripted relations of a given type or multiple types, if someone is multiple relations they will only be in the list once random_relation = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_relation] = {
    ## cardinality = 1..inf
    type = <scripted_relation>
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..inf
    alternative_limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    weight = single_alias_right[weight_block]
    alias_name[effect] = alias_match_left[effect]
}

### Iterate through all dynasty members every_dynasty_member = { limit = { <triggers> } <effects> }
alias[effect:every_dynasty_member] = single_alias_right[iteration_every]

### Iterate through all dynasty members ordered_dynasty_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_dynasty_member] = single_alias_right[iteration_ordered]

### Iterate through all dynasty members random_dynasty_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_dynasty_member] = single_alias_right[iteration_random]

### Iterate through all house members every_house_member = { limit = { <triggers> } <effects> }
alias[effect:every_house_member] = single_alias_right[iteration_every]

### Iterate through all house members ordered_house_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_house_member] = single_alias_right[iteration_ordered]

### Iterate through all house members random_house_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_house_member] = single_alias_right[iteration_random]

### Iterate through all faiths within a religion every_faith = { limit = { <triggers> } <effects> }
alias[effect:every_faith] = single_alias_right[iteration_every]

### Iterate through all faiths within a religion ordered_faith = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_faith] = single_alias_right[iteration_ordered]

### Iterate through all faiths within a religion random_faith = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_faith] = single_alias_right[iteration_random]

### Iterate through all agents in the scheme every_scheme_agent = { limit = { <triggers> } <effects> }
alias[effect:every_scheme_agent] = single_alias_right[iteration_every]

### Iterate through all agents in the scheme ordered_scheme_agent = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_scheme_agent] = single_alias_right[iteration_ordered]

### Iterate through all agents in the scheme random_scheme_agent = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_scheme_agent] = single_alias_right[iteration_random]

### Iterate through all claimants to title. parameters: explicit = yes/no/all - default yes every_claimant = { limit = { <triggers> } <effects> }
alias[effect:every_claimant] = single_alias_right[iteration_every]

### Iterate through all counties connected to this one. Is based on top liege any/every/whatever_connectec_county = { 	max_naval_distance = 500 	allow_one_county_land_gap = yes every_connected_county = { limit = { <triggers> } <effects> }
alias[effect:every_connected_county] = single_alias_right[iteration_every]

### Iterate through all provinces in a county every_county_province = { limit = { <triggers> } <effects> }
alias[effect:every_county_province] = single_alias_right[iteration_every]

### Iterate through all characters directly holding counties within this dejure title every_de_jure_county_holder = { limit = { <triggers> } <effects> }
alias[effect:every_de_jure_county_holder] = single_alias_right[iteration_every]

### Iterate through all top lieges of the counts within this dejure title every_de_jure_top_liege = { limit = { <triggers> } <effects> }
alias[effect:every_de_jure_top_liege] = single_alias_right[iteration_every]

### Iterate through all the vassal holders of the title every_dejure_vassal_title_holder = { limit = { <triggers> } <effects> }
alias[effect:every_dejure_vassal_title_holder] = single_alias_right[iteration_every]

### Iterate through all characters who are valid candidates in an election for a title every_election_candidate = { limit = { <triggers> } <effects> }
alias[effect:every_election_candidate] = single_alias_right[iteration_every]

### Iterate through all characters who are valid electors in an election for a title every_elector = { limit = { <triggers> } <effects> }
alias[effect:every_elector] = single_alias_right[iteration_every]

### Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } every_in_de_facto_hierarchy = { limit = { <triggers> } <effects> }
alias[effect:every_in_de_facto_hierarchy] = single_alias_right[iteration_every]

### Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } every_in_de_jure_hierarchy = { limit = { <triggers> } <effects> }
alias[effect:every_in_de_jure_hierarchy] = single_alias_right[iteration_every]

### Iterate through all neighboring counties. Can only be used in county scope every_neighboring_county = { limit = { <triggers> } <effects> }
alias[effect:every_neighboring_county] = single_alias_right[iteration_every]

### Iterate through this title and all its dejure liege titles every_this_title_or_de_jure_above = { limit = { <triggers> } <effects> }
alias[effect:every_this_title_or_de_jure_above] = single_alias_right[iteration_every]

### Line of succession for the scoped title every_title_heir = { limit = { <triggers> } <effects> }
alias[effect:every_title_heir] = single_alias_right[iteration_every]

### Iterate through all factions joined the scope landed title every_title_joined_faction = { limit = { <triggers> } <effects> }
alias[effect:every_title_joined_faction] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring barony (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_and_across_water_barony] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_and_across_water_county] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_and_across_water_duchy] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_and_across_water_empire] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) every_title_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_and_across_water_kingdom] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring barony (looking trough the de Jure lieges) every_title_to_title_neighboring_barony = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_barony] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring county (looking trough the de Jure lieges) every_title_to_title_neighboring_county = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_county] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges) every_title_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_duchy] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges) every_title_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_empire] = single_alias_right[iteration_every]

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges) every_title_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
alias[effect:every_title_to_title_neighboring_kingdom] = single_alias_right[iteration_every]

### Iterate through all claimants to title. parameters: explicit = yes/no/all - default yes ordered_claimant = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_claimant] = single_alias_right[iteration_ordered]

### Iterate through all counties connected to this one. Is based on top liege any/every/whatever_connectec_county = { 	max_naval_distance = 500 	allow_one_county_land_gap = yes ordered_connected_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_connected_county] = single_alias_right[iteration_ordered]

### Iterate through all provinces in a county ordered_county_province = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_county_province] = single_alias_right[iteration_ordered]

### Iterate through all characters directly holding counties within this dejure title ordered_de_jure_county_holder = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_de_jure_county_holder] = single_alias_right[iteration_ordered]

### Iterate through all top lieges of the counts within this dejure title ordered_de_jure_top_liege = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_de_jure_top_liege] = single_alias_right[iteration_ordered]

### Iterate through all the vassal holders of the title ordered_dejure_vassal_title_holder = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_dejure_vassal_title_holder] = single_alias_right[iteration_ordered]

### Iterate through all characters who are valid candidates in an election for a title ordered_election_candidate = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_election_candidate] = single_alias_right[iteration_ordered]

### Iterate through all characters who are valid electors in an election for a title ordered_elector = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_elector] = single_alias_right[iteration_ordered]

### Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } ordered_in_de_facto_hierarchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_in_de_facto_hierarchy] = single_alias_right[iteration_ordered]

### Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } ordered_in_de_jure_hierarchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_in_de_jure_hierarchy] = single_alias_right[iteration_ordered]

### Iterate through all neighboring counties. Can only be used in county scope ordered_neighboring_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_neighboring_county] = single_alias_right[iteration_ordered]

### Iterate through this title and all its dejure liege titles ordered_this_title_or_de_jure_above = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_this_title_or_de_jure_above] = single_alias_right[iteration_ordered]

### Line of succession for the scoped title ordered_title_heir = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_heir] = single_alias_right[iteration_ordered]

### Iterate through all factions joined the scope landed title ordered_title_joined_faction = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_joined_faction] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring barony (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_and_across_water_barony] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_and_across_water_county] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_and_across_water_duchy] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_and_across_water_empire] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) ordered_title_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_and_across_water_kingdom] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring barony (looking trough the de Jure lieges) ordered_title_to_title_neighboring_barony = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_barony] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring county (looking trough the de Jure lieges) ordered_title_to_title_neighboring_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_county] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges) ordered_title_to_title_neighboring_duchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_duchy] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges) ordered_title_to_title_neighboring_empire = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_empire] = single_alias_right[iteration_ordered]

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges) ordered_title_to_title_neighboring_kingdom = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_title_to_title_neighboring_kingdom] = single_alias_right[iteration_ordered]

### Iterate through all claimants to title. parameters: explicit = yes/no/all - default yes random_claimant = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_claimant] = single_alias_right[iteration_random]

### Iterate through all counties connected to this one. Is based on top liege any/every/whatever_connectec_county = { 	max_naval_distance = 500 	allow_one_county_land_gap = yes random_connected_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_connected_county] = single_alias_right[iteration_random]

### Iterate through all provinces in a county random_county_province = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_county_province] = single_alias_right[iteration_random]

### Iterate through all characters directly holding counties within this dejure title random_de_jure_county_holder = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_de_jure_county_holder] = single_alias_right[iteration_random]

### Iterate through all top lieges of the counts within this dejure title random_de_jure_top_liege = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_de_jure_top_liege] = single_alias_right[iteration_random]

### Iterate through all the vassal holders of the title random_dejure_vassal_title_holder = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_dejure_vassal_title_holder] = single_alias_right[iteration_random]

### Iterate through all characters who are valid candidates in an election for a title random_election_candidate = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_election_candidate] = single_alias_right[iteration_random]

### Iterate through all characters who are valid electors in an election for a title random_elector = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_elector] = single_alias_right[iteration_random]

### Iterate through the title itself, all de facto vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } random_in_de_facto_hierarchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_in_de_facto_hierarchy] = single_alias_right[iteration_random]

### Iterate through the title itself, all de jure vassals, and below. The continue trigger specifies whether to recursively iterate through the vassal's vassal This is unrelated to the limit; if the limit is met it is added to the list, but its vassals will get checked even if the limit isn't met as long as the 'continue' trigger is ..._de_jure_vassal_and_below = { continue = { conditions } } random_in_de_jure_hierarchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_in_de_jure_hierarchy] = single_alias_right[iteration_random]

### Iterate through all neighboring counties. Can only be used in county scope random_neighboring_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_neighboring_county] = single_alias_right[iteration_random]

### Iterate through this title and all its dejure liege titles random_this_title_or_de_jure_above = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_this_title_or_de_jure_above] = single_alias_right[iteration_random]

### Line of succession for the scoped title random_title_heir = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_heir] = single_alias_right[iteration_random]

### Iterate through all factions joined the scope landed title random_title_joined_faction = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_joined_faction] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring barony (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_barony = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_and_across_water_barony] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring county (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_and_across_water_county] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring duchy (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_and_across_water_duchy] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring empire (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_and_across_water_empire] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) random_title_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_and_across_water_kingdom] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring barony (looking trough the de Jure lieges) random_title_to_title_neighboring_barony = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_barony] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring county (looking trough the de Jure lieges) random_title_to_title_neighboring_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_county] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring duchy (looking trough the de Jure lieges) random_title_to_title_neighboring_duchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_duchy] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring empire (looking trough the de Jure lieges) random_title_to_title_neighboring_empire = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_empire] = single_alias_right[iteration_random]

### Scopes from a title to a neighboring kingdom (looking trough the de Jure lieges) random_title_to_title_neighboring_kingdom = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_title_to_title_neighboring_kingdom] = single_alias_right[iteration_random]

### Iterate through all titles that can be created by the character. (only for alerts) every_alert_creatable_title = { limit = { <triggers> } <effects> }
alias[effect:every_alert_creatable_title] = single_alias_right[iteration_every]

### Iterate through all titles that can be usurped by the character. (only for alerts) every_alert_usurpable_title = { limit = { <triggers> } <effects> }
alias[effect:every_alert_usurpable_title] = single_alias_right[iteration_every]

### Iterate through all allies every_ally = { limit = { <triggers> } <effects> }
alias[effect:every_ally] = single_alias_right[iteration_every]

### Iterate through all the ancestors of the scope character up to 5 generations every_ancestor = { limit = { <triggers> } <effects> }
alias[effect:every_ancestor] = single_alias_right[iteration_every]

### Iterate through all armies every_army = { limit = { <triggers> } <effects> }
alias[effect:every_army] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_county = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_and_across_water_county] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_and_across_water_duchy] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_and_across_water_empire] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) every_character_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_and_across_water_kingdom] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring county (looking trough the de Jure lieges) every_character_to_title_neighboring_county = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_county] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges) every_character_to_title_neighboring_duchy = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_duchy] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges) every_character_to_title_neighboring_empire = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_empire] = single_alias_right[iteration_every]

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges) every_character_to_title_neighboring_kingdom = { limit = { <triggers> } <effects> }
alias[effect:every_character_to_title_neighboring_kingdom] = single_alias_right[iteration_every]

### Wars of the scoped character every_character_war = { limit = { <triggers> } <effects> }
alias[effect:every_character_war] = single_alias_right[iteration_every]

### Iterate through all children every_child = { limit = { <triggers> } <effects> }
alias[effect:every_child] = single_alias_right[iteration_every]

### Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all every_claim = { limit = { <triggers> } <effects> }
alias[effect:every_claim] = single_alias_right[iteration_every]

### Iterate through all the close family [father, mother, siblings, children, grandparents] every_close_family_member = { limit = { <triggers> } <effects> }
alias[effect:every_close_family_member] = single_alias_right[iteration_every]

### Iterate through all the close and extended relatives [father, mother, siblings, children, grandparents, uncles/aunts, nephew/niece, cousins] every_close_or_extended_family_member = { limit = { <triggers> } <effects> }
alias[effect:every_close_or_extended_family_member] = single_alias_right[iteration_every]

### Iterate through all concubines every_concubine = { limit = { <triggers> } <effects> }
alias[effect:every_concubine] = single_alias_right[iteration_every]

### Iterate through all consorts (concubines and spouses) every_consort = { limit = { <triggers> } <effects> }
alias[effect:every_consort] = single_alias_right[iteration_every]

### Iterate through all councillors every_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_councillor] = single_alias_right[iteration_every]

### Iterate through all courtiers every_courtier = { limit = { <triggers> } <effects> }
alias[effect:every_courtier] = single_alias_right[iteration_every]

### Iterate through all courtiers that are away every_courtier_away = { limit = { <triggers> } <effects> }
alias[effect:every_courtier_away] = single_alias_right[iteration_every]

### Iterate through all courtiers and guests (pool and foreign court guests) every_courtier_or_guest = { limit = { <triggers> } <effects> }
alias[effect:every_courtier_or_guest] = single_alias_right[iteration_every]

### Iterate through all de jure claims for a character every_de_jure_claim = { limit = { <triggers> } <effects> }
alias[effect:every_de_jure_claim] = single_alias_right[iteration_every]

### Iterate through all diplomacy-based councillors every_diplomacy_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_diplomacy_councillor] = single_alias_right[iteration_every]

### Iterate through all directly owned provinces every_directly_owned_province = { limit = { <triggers> } <effects> }
alias[effect:every_directly_owned_province] = single_alias_right[iteration_every]

### Iterate through all titles the scoped character can vote on every_election_title = { limit = { <triggers> } <effects> }
alias[effect:every_election_title] = single_alias_right[iteration_every]

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins] every_extended_family_member = { limit = { <triggers> } <effects> }
alias[effect:every_extended_family_member] = single_alias_right[iteration_every]

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege) every_foreign_court_guest = { limit = { <triggers> } <effects> }
alias[effect:every_foreign_court_guest] = single_alias_right[iteration_every]

### Iterate through all former concubines. Not persisted past death every_former_concubine = { limit = { <triggers> } <effects> }
alias[effect:every_former_concubine] = single_alias_right[iteration_every]

### Iterate through all former concubinists. Not persisted past death every_former_concubinist = { limit = { <triggers> } <effects> }
alias[effect:every_former_concubinist] = single_alias_right[iteration_every]

### Iterate through all former spouses every_former_spouse = { limit = { <triggers> } <effects> }
alias[effect:every_former_spouse] = single_alias_right[iteration_every]

### Iterate through all councillors that are not related to a skill every_general_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_general_councillor] = single_alias_right[iteration_every]

### Heirs of the scoped character every_heir = { limit = { <triggers> } <effects> }
alias[effect:every_heir] = single_alias_right[iteration_every]

### Iterate through all landed titles character is heir to every_heir_title = { limit = { <triggers> } <effects> }
alias[effect:every_heir_title] = single_alias_right[iteration_every]

### Iterate through all titles the scoped character is heir to every_heir_to_title = { limit = { <triggers> } <effects> }
alias[effect:every_heir_to_title] = single_alias_right[iteration_every]

### Iterate through all held landed titles every_held_title = { limit = { <triggers> } <effects> }
alias[effect:every_held_title] = single_alias_right[iteration_every]

### Iterate through all hired mercenary companies every_hired_mercenary = { limit = { <triggers> } <effects> }
alias[effect:every_hired_mercenary] = single_alias_right[iteration_every]

### Iterate through all characters this character has a hook on every_hooked_character = { limit = { <triggers> } <effects> }
alias[effect:every_hooked_character] = single_alias_right[iteration_every]

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided every_hostile_raider = { limit = { <triggers> } <effects> }
alias[effect:every_hostile_raider] = single_alias_right[iteration_every]

### Iterate through all intrigue-based councillors every_intrigue_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_intrigue_councillor] = single_alias_right[iteration_every]

### Iterate through all knights every_knight = { limit = { <triggers> } <effects> }
alias[effect:every_knight] = single_alias_right[iteration_every]

### Iterate through all secrets known by the character every_known_secret = { limit = { <triggers> } <effects> }
alias[effect:every_known_secret] = single_alias_right[iteration_every]

### Iterate through all learning-based councillors every_learning_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_learning_councillor] = single_alias_right[iteration_every]

### Iterate through all lieges above a character (skipping the character themselves) every_liege_or_above = { limit = { <triggers> } <effects> }
alias[effect:every_liege_or_above] = single_alias_right[iteration_every]

### Iterate through all martial-based councillors every_martial_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_martial_councillor] = single_alias_right[iteration_every]

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary) every_neighboring_and_across_water_realm_same_rank_owner = { limit = { <triggers> } <effects> }
alias[effect:every_neighboring_and_across_water_realm_same_rank_owner] = single_alias_right[iteration_every]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title. Can be based on borders a day or two out of date every_neighboring_and_across_water_top_liege_realm = { limit = { <triggers> } <effects> }
alias[effect:every_neighboring_and_across_water_top_liege_realm] = single_alias_right[iteration_every]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm. Can be based on borders a day or two out of date every_neighboring_and_across_water_top_liege_realm_owner = { limit = { <triggers> } <effects> }
alias[effect:every_neighboring_and_across_water_top_liege_realm_owner] = single_alias_right[iteration_every]

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary) every_neighboring_realm_same_rank_owner = { limit = { <triggers> } <effects> }
alias[effect:every_neighboring_realm_same_rank_owner] = single_alias_right[iteration_every]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title. Can be based on borders a day or two out of date every_neighboring_top_liege_realm = { limit = { <triggers> } <effects> }
alias[effect:every_neighboring_top_liege_realm] = single_alias_right[iteration_every]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm. Can be based on borders a day or two out of date every_neighboring_top_liege_realm_owner = { limit = { <triggers> } <effects> }
alias[effect:every_neighboring_top_liege_realm_owner] = single_alias_right[iteration_every]

### Iterate through all owned stories for a character every_owned_story = { limit = { <triggers> } <effects> }
alias[effect:every_owned_story] = single_alias_right[iteration_every]

### Iterate through all (both) parents every_parent = { limit = { <triggers> } <effects> }
alias[effect:every_parent] = single_alias_right[iteration_every]

### Iterate through all holy orders that the scoped character is a patron of every_patroned_holy_order = { limit = { <triggers> } <effects> }
alias[effect:every_patroned_holy_order] = single_alias_right[iteration_every]

### Iterate through characters this player has pinned every_pinned_character = { limit = { <triggers> } <effects> }
alias[effect:every_pinned_character] = single_alias_right[iteration_every]

### Iterate through characters whose player has this character pinned every_pinning_character = { limit = { <triggers> } <effects> }
alias[effect:every_pinning_character] = single_alias_right[iteration_every]

### Iterate through player heirs, capped at the first 10 every_player_heir = { limit = { <triggers> } <effects> }
alias[effect:every_player_heir] = single_alias_right[iteration_every]

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege) every_pool_guest = { limit = { <triggers> } <effects> }
alias[effect:every_pool_guest] = single_alias_right[iteration_every]

### Iterate through all potential selectable marriage or betrohed options every_potential_marriage_option = { limit = { <triggers> } <effects> }
alias[effect:every_potential_marriage_option] = single_alias_right[iteration_every]

### Iterate through all landed titles character is pretender to every_pretender_title = { limit = { <triggers> } <effects> }
alias[effect:every_pretender_title] = single_alias_right[iteration_every]

### Iterate through all primary war enemies every_primary_war_enemy = { limit = { <triggers> } <effects> }
alias[effect:every_primary_war_enemy] = single_alias_right[iteration_every]

### Iterate through all prisoners every_prisoner = { limit = { <triggers> } <effects> }
alias[effect:every_prisoner] = single_alias_right[iteration_every]

### Iterate through all prowess-based councillors every_prowess_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_prowess_councillor] = single_alias_right[iteration_every]

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges every_raid_target = { limit = { <triggers> } <effects> }
alias[effect:every_raid_target] = single_alias_right[iteration_every]

### Iterate through all counties in the realm. Based on top liege  every_realm_county = { limit = { <triggers> } <effects> }
alias[effect:every_realm_county] = single_alias_right[iteration_every]

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege  every_realm_de_jure_duchy = { limit = { <triggers> } <effects> }
alias[effect:every_realm_de_jure_duchy] = single_alias_right[iteration_every]

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege  every_realm_de_jure_empire = { limit = { <triggers> } <effects> }
alias[effect:every_realm_de_jure_empire] = single_alias_right[iteration_every]

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege  every_realm_de_jure_kingdom = { limit = { <triggers> } <effects> }
alias[effect:every_realm_de_jure_kingdom] = single_alias_right[iteration_every]

### Iterate through all realm provinces of a character every_realm_province = { limit = { <triggers> } <effects> }
alias[effect:every_realm_province] = single_alias_right[iteration_every]

### Iterate through all schemes owned by the character every_scheme = { limit = { <triggers> } <effects> }
alias[effect:every_scheme] = single_alias_right[iteration_every]

### Iterate through all secrets of the character every_secret = { limit = { <triggers> } <effects> }
alias[effect:every_secret] = single_alias_right[iteration_every]

### Iterate through all siblings every_sibling = { limit = { <triggers> } <effects> }
alias[effect:every_sibling] = single_alias_right[iteration_every]

### Iterate through all spouses every_spouse = { limit = { <triggers> } <effects> }
alias[effect:every_spouse] = single_alias_right[iteration_every]

### Iterate through all the spouse candidates of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN. every_spouse_candidate = { limit = { <triggers> } <effects> }
alias[effect:every_spouse_candidate] = single_alias_right[iteration_every]

### Iterate through all stewardship-based councillors every_stewardship_councillor = { limit = { <triggers> } <effects> }
alias[effect:every_stewardship_councillor] = single_alias_right[iteration_every]

### Iterate through all baronies in sub-realm every_sub_realm_barony = { limit = { <triggers> } <effects> }
alias[effect:every_sub_realm_barony] = single_alias_right[iteration_every]

### Iterate through all counties in sub-realm every_sub_realm_county = { limit = { <triggers> } <effects> }
alias[effect:every_sub_realm_county] = single_alias_right[iteration_every]

### Iterate through all duchies in sub-realm every_sub_realm_duchy = { limit = { <triggers> } <effects> }
alias[effect:every_sub_realm_duchy] = single_alias_right[iteration_every]

### Iterate through all empires in sub-realm every_sub_realm_empire = { limit = { <triggers> } <effects> }
alias[effect:every_sub_realm_empire] = single_alias_right[iteration_every]

### Iterate through all kingdoms in sub-realm every_sub_realm_kingdom = { limit = { <triggers> } <effects> }
alias[effect:every_sub_realm_kingdom] = single_alias_right[iteration_every]

### Iterate through all titles in sub-realm every_sub_realm_title = { limit = { <triggers> } <effects> }
alias[effect:every_sub_realm_title] = single_alias_right[iteration_every]

### Iterate through all factions targeting the scope character every_targeting_faction = { limit = { <triggers> } <effects> }
alias[effect:every_targeting_faction] = single_alias_right[iteration_every]

### Iterate through all schemes targeting the character every_targeting_scheme = { limit = { <triggers> } <effects> }
alias[effect:every_targeting_scheme] = single_alias_right[iteration_every]

### Iterate through all secrets that target the specified scope every_targeting_secret = { limit = { <triggers> } <effects> }
alias[effect:every_targeting_secret] = single_alias_right[iteration_every]

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character every_traveling_family_member = { limit = { <triggers> } <effects> }
alias[effect:every_traveling_family_member] = single_alias_right[iteration_every]

### Iterate through all characters that have a truce on this character every_truce_holder = { limit = { <triggers> } <effects> }
alias[effect:every_truce_holder] = single_alias_right[iteration_every]

### Iterate through all characters this character has a truce on every_truce_target = { limit = { <triggers> } <effects> }
alias[effect:every_truce_target] = single_alias_right[iteration_every]

### Iterate through all unspent secrets known by the character every_unspent_known_secret = { limit = { <triggers> } <effects> }
alias[effect:every_unspent_known_secret] = single_alias_right[iteration_every]

### Iterate through all DIRECT vassals every_vassal = { limit = { <triggers> } <effects> }
alias[effect:every_vassal] = single_alias_right[iteration_every]

### Iterate through ALL vassals, not just direct vassals every_vassal_or_below = { limit = { <triggers> } <effects> }
alias[effect:every_vassal_or_below] = single_alias_right[iteration_every]

### Iterate through all direct war allies every_war_ally = { limit = { <triggers> } <effects> }
alias[effect:every_war_ally] = single_alias_right[iteration_every]

### Iterate through all direct war enemies every_war_enemy = { limit = { <triggers> } <effects> }
alias[effect:every_war_enemy] = single_alias_right[iteration_every]

### Iterate through all titles that can be created by the character. (only for alerts) ordered_alert_creatable_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_alert_creatable_title] = single_alias_right[iteration_ordered]

### Iterate through all titles that can be usurped by the character. (only for alerts) ordered_alert_usurpable_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_alert_usurpable_title] = single_alias_right[iteration_ordered]

### Iterate through all allies ordered_ally = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_ally] = single_alias_right[iteration_ordered]

### Iterate through all the ancestors of the scope character up to 5 generations ordered_ancestor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_ancestor] = single_alias_right[iteration_ordered]

### Iterate through all armies ordered_army = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_army] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_and_across_water_county] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_and_across_water_duchy] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_and_across_water_empire] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) ordered_character_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_and_across_water_kingdom] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring county (looking trough the de Jure lieges) ordered_character_to_title_neighboring_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_county] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges) ordered_character_to_title_neighboring_duchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_duchy] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges) ordered_character_to_title_neighboring_empire = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_empire] = single_alias_right[iteration_ordered]

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges) ordered_character_to_title_neighboring_kingdom = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_to_title_neighboring_kingdom] = single_alias_right[iteration_ordered]

### Wars of the scoped character ordered_character_war = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_character_war] = single_alias_right[iteration_ordered]

### Iterate through all children ordered_child = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_child] = single_alias_right[iteration_ordered]

### Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all ordered_claim = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_claim] = single_alias_right[iteration_ordered]

### Iterate through all the close family [father, mother, siblings, children, grandparents] ordered_close_family_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_close_family_member] = single_alias_right[iteration_ordered]

### Iterate through all the close and extended relatives [father, mother, siblings, children, grandparents, uncles/aunts, nephew/niece, cousins] ordered_close_or_extended_family_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_close_or_extended_family_member] = single_alias_right[iteration_ordered]

### Iterate through all concubines ordered_concubine = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_concubine] = single_alias_right[iteration_ordered]

### Iterate through all consorts (concubines and spouses) ordered_consort = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_consort] = single_alias_right[iteration_ordered]

### Iterate through all councillors ordered_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_councillor] = single_alias_right[iteration_ordered]

### Iterate through all courtiers ordered_courtier = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_courtier] = single_alias_right[iteration_ordered]

### Iterate through all courtiers that are away ordered_courtier_away = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_courtier_away] = single_alias_right[iteration_ordered]

### Iterate through all courtiers and guests (pool and foreign court guests) ordered_courtier_or_guest = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_courtier_or_guest] = single_alias_right[iteration_ordered]

### Iterate through all de jure claims for a character ordered_de_jure_claim = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_de_jure_claim] = single_alias_right[iteration_ordered]

### Iterate through all diplomacy-based councillors ordered_diplomacy_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_diplomacy_councillor] = single_alias_right[iteration_ordered]

### Iterate through all directly owned provinces ordered_directly_owned_province = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_directly_owned_province] = single_alias_right[iteration_ordered]

### Iterate through all titles the scoped character can vote on ordered_election_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_election_title] = single_alias_right[iteration_ordered]

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins] ordered_extended_family_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_extended_family_member] = single_alias_right[iteration_ordered]

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege) ordered_foreign_court_guest = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_foreign_court_guest] = single_alias_right[iteration_ordered]

### Iterate through all former concubines. Not persisted past death ordered_former_concubine = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_former_concubine] = single_alias_right[iteration_ordered]

### Iterate through all former concubinists. Not persisted past death ordered_former_concubinist = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_former_concubinist] = single_alias_right[iteration_ordered]

### Iterate through all former spouses ordered_former_spouse = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_former_spouse] = single_alias_right[iteration_ordered]

### Iterate through all councillors that are not related to a skill ordered_general_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_general_councillor] = single_alias_right[iteration_ordered]

### Heirs of the scoped character ordered_heir = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_heir] = single_alias_right[iteration_ordered]

### Iterate through all landed titles character is heir to ordered_heir_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_heir_title] = single_alias_right[iteration_ordered]

### Iterate through all titles the scoped character is heir to ordered_heir_to_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_heir_to_title] = single_alias_right[iteration_ordered]

### Iterate through all held landed titles ordered_held_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_held_title] = single_alias_right[iteration_ordered]

### Iterate through all hired mercenary companies ordered_hired_mercenary = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_hired_mercenary] = single_alias_right[iteration_ordered]

### Iterate through all characters this character has a hook on ordered_hooked_character = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_hooked_character] = single_alias_right[iteration_ordered]

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided ordered_hostile_raider = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_hostile_raider] = single_alias_right[iteration_ordered]

### Iterate through all intrigue-based councillors ordered_intrigue_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_intrigue_councillor] = single_alias_right[iteration_ordered]

### Iterate through all knights ordered_knight = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_knight] = single_alias_right[iteration_ordered]

### Iterate through all secrets known by the character ordered_known_secret = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_known_secret] = single_alias_right[iteration_ordered]

### Iterate through all learning-based councillors ordered_learning_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_learning_councillor] = single_alias_right[iteration_ordered]

### Iterate through all lieges above a character (skipping the character themselves) ordered_liege_or_above = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_liege_or_above] = single_alias_right[iteration_ordered]

### Iterate through all martial-based councillors ordered_martial_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_martial_councillor] = single_alias_right[iteration_ordered]

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary) ordered_neighboring_and_across_water_realm_same_rank_owner = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_neighboring_and_across_water_realm_same_rank_owner] = single_alias_right[iteration_ordered]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title. Can be based on borders a day or two out of date ordered_neighboring_and_across_water_top_liege_realm = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_neighboring_and_across_water_top_liege_realm] = single_alias_right[iteration_ordered]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm. Can be based on borders a day or two out of date ordered_neighboring_and_across_water_top_liege_realm_owner = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_neighboring_and_across_water_top_liege_realm_owner] = single_alias_right[iteration_ordered]

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary) ordered_neighboring_realm_same_rank_owner = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_neighboring_realm_same_rank_owner] = single_alias_right[iteration_ordered]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title. Can be based on borders a day or two out of date ordered_neighboring_top_liege_realm = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_neighboring_top_liege_realm] = single_alias_right[iteration_ordered]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm. Can be based on borders a day or two out of date ordered_neighboring_top_liege_realm_owner = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_neighboring_top_liege_realm_owner] = single_alias_right[iteration_ordered]

### Iterate through all owned stories for a character ordered_owned_story = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_owned_story] = single_alias_right[iteration_ordered]

### Iterate through all (both) parents ordered_parent = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_parent] = single_alias_right[iteration_ordered]

### Iterate through all holy orders that the scoped character is a patron of ordered_patroned_holy_order = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_patroned_holy_order] = single_alias_right[iteration_ordered]

### Iterate through characters this player has pinned ordered_pinned_character = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_pinned_character] = single_alias_right[iteration_ordered]

### Iterate through characters whose player has this character pinned ordered_pinning_character = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_pinning_character] = single_alias_right[iteration_ordered]

### Iterate through player heirs, capped at the first 10 ordered_player_heir = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_player_heir] = single_alias_right[iteration_ordered]

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege) ordered_pool_guest = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_pool_guest] = single_alias_right[iteration_ordered]

### Iterate through all potential selectable marriage or betrohed options ordered_potential_marriage_option = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_potential_marriage_option] = single_alias_right[iteration_ordered]

### Iterate through all landed titles character is pretender to ordered_pretender_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_pretender_title] = single_alias_right[iteration_ordered]

### Iterate through all primary war enemies ordered_primary_war_enemy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_primary_war_enemy] = single_alias_right[iteration_ordered]

### Iterate through all prisoners ordered_prisoner = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_prisoner] = single_alias_right[iteration_ordered]

### Iterate through all prowess-based councillors ordered_prowess_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_prowess_councillor] = single_alias_right[iteration_ordered]

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges ordered_raid_target = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_raid_target] = single_alias_right[iteration_ordered]

### Iterate through all counties in the realm. Based on top liege  ordered_realm_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_realm_county] = single_alias_right[iteration_ordered]

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege  ordered_realm_de_jure_duchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_realm_de_jure_duchy] = single_alias_right[iteration_ordered]

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege  ordered_realm_de_jure_empire = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_realm_de_jure_empire] = single_alias_right[iteration_ordered]

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege  ordered_realm_de_jure_kingdom = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_realm_de_jure_kingdom] = single_alias_right[iteration_ordered]

### Iterate through all realm provinces of a character ordered_realm_province = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_realm_province] = single_alias_right[iteration_ordered]

### Iterate through all schemes owned by the character ordered_scheme = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_scheme] = single_alias_right[iteration_ordered]

### Iterate through all secrets of the character ordered_secret = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_secret] = single_alias_right[iteration_ordered]

### Iterate through all siblings ordered_sibling = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_sibling] = single_alias_right[iteration_ordered]

### Iterate through all spouses ordered_spouse = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_spouse] = single_alias_right[iteration_ordered]

### Iterate through all the spouse candidates of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN. ordered_spouse_candidate = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_spouse_candidate] = single_alias_right[iteration_ordered]

### Iterate through all stewardship-based councillors ordered_stewardship_councillor = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_stewardship_councillor] = single_alias_right[iteration_ordered]

### Iterate through all baronies in sub-realm ordered_sub_realm_barony = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_sub_realm_barony] = single_alias_right[iteration_ordered]

### Iterate through all counties in sub-realm ordered_sub_realm_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_sub_realm_county] = single_alias_right[iteration_ordered]

### Iterate through all duchies in sub-realm ordered_sub_realm_duchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_sub_realm_duchy] = single_alias_right[iteration_ordered]

### Iterate through all empires in sub-realm ordered_sub_realm_empire = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_sub_realm_empire] = single_alias_right[iteration_ordered]

### Iterate through all kingdoms in sub-realm ordered_sub_realm_kingdom = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_sub_realm_kingdom] = single_alias_right[iteration_ordered]

### Iterate through all titles in sub-realm ordered_sub_realm_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_sub_realm_title] = single_alias_right[iteration_ordered]

### Iterate through all factions targeting the scope character ordered_targeting_faction = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_targeting_faction] = single_alias_right[iteration_ordered]

### Iterate through all schemes targeting the character ordered_targeting_scheme = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_targeting_scheme] = single_alias_right[iteration_ordered]

### Iterate through all secrets that target the specified scope ordered_targeting_secret = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_targeting_secret] = single_alias_right[iteration_ordered]

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character ordered_traveling_family_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_traveling_family_member] = single_alias_right[iteration_ordered]

### Iterate through all characters that have a truce on this character ordered_truce_holder = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_truce_holder] = single_alias_right[iteration_ordered]

### Iterate through all characters this character has a truce on ordered_truce_target = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_truce_target] = single_alias_right[iteration_ordered]

### Iterate through all unspent secrets known by the character ordered_unspent_known_secret = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_unspent_known_secret] = single_alias_right[iteration_ordered]

### Iterate through all DIRECT vassals ordered_vassal = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_vassal] = single_alias_right[iteration_ordered]

### Iterate through ALL vassals, not just direct vassals ordered_vassal_or_below = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_vassal_or_below] = single_alias_right[iteration_ordered]

### Iterate through all direct war allies ordered_war_ally = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_war_ally] = single_alias_right[iteration_ordered]

### Iterate through all direct war enemies ordered_war_enemy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_war_enemy] = single_alias_right[iteration_ordered]

### Iterate through all titles that can be created by the character. (only for alerts) random_alert_creatable_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_alert_creatable_title] = single_alias_right[iteration_random]

### Iterate through all titles that can be usurped by the character. (only for alerts) random_alert_usurpable_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_alert_usurpable_title] = single_alias_right[iteration_random]

### Iterate through all allies random_ally = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_ally] = single_alias_right[iteration_random]

### Iterate through all the ancestors of the scope character up to 5 generations random_ancestor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_ancestor] = single_alias_right[iteration_random]

### Iterate through all armies random_army = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_army] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring county (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_and_across_water_county] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring duchy (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_duchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_and_across_water_duchy] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring empire (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_empire = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_and_across_water_empire] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring kingdom (incl. across water, looking trough the de Jure lieges) random_character_to_title_neighboring_and_across_water_kingdom = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_and_across_water_kingdom] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring county (looking trough the de Jure lieges) random_character_to_title_neighboring_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_county] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring duchy (looking trough the de Jure lieges) random_character_to_title_neighboring_duchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_duchy] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring empire (looking trough the de Jure lieges) random_character_to_title_neighboring_empire = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_empire] = single_alias_right[iteration_random]

### Scopes from a character to a neighboring kingdom (looking trough the de Jure lieges) random_character_to_title_neighboring_kingdom = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_to_title_neighboring_kingdom] = single_alias_right[iteration_random]

### Wars of the scoped character random_character_war = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_character_war] = single_alias_right[iteration_random]

### Iterate through all children random_child = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_child] = single_alias_right[iteration_random]

### Iterate through the titles of all claims held by a character; parameters: explicit = yes/no/all pressed = yes/no/all random_claim = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_claim] = single_alias_right[iteration_random]

### Iterate through all the close family [father, mother, siblings, children, grandparents] random_close_family_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_close_family_member] = single_alias_right[iteration_random]

### Iterate through all the close and extended relatives [father, mother, siblings, children, grandparents, uncles/aunts, nephew/niece, cousins] random_close_or_extended_family_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_close_or_extended_family_member] = single_alias_right[iteration_random]

### Iterate through all concubines random_concubine = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_concubine] = single_alias_right[iteration_random]

### Iterate through all consorts (concubines and spouses) random_consort = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_consort] = single_alias_right[iteration_random]

### Iterate through all councillors random_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_councillor] = single_alias_right[iteration_random]

### Iterate through all courtiers random_courtier = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_courtier] = single_alias_right[iteration_random]

### Iterate through all courtiers that are away random_courtier_away = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_courtier_away] = single_alias_right[iteration_random]

### Iterate through all courtiers and guests (pool and foreign court guests) random_courtier_or_guest = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_courtier_or_guest] = single_alias_right[iteration_random]

### Iterate through all de jure claims for a character random_de_jure_claim = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_de_jure_claim] = single_alias_right[iteration_random]

### Iterate through all diplomacy-based councillors random_diplomacy_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_diplomacy_councillor] = single_alias_right[iteration_random]

### Iterate through all directly owned provinces random_directly_owned_province = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_directly_owned_province] = single_alias_right[iteration_random]

### Iterate through all titles the scoped character can vote on random_election_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_election_title] = single_alias_right[iteration_random]

### Iterate through all the extended family [uncles/aunts, nephew/niece, cousins] random_extended_family_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_extended_family_member] = single_alias_right[iteration_random]

### Iterate through all guests visiting from another court (in contrast to pool_guest they have a liege) random_foreign_court_guest = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_foreign_court_guest] = single_alias_right[iteration_random]

### Iterate through all former concubines. Not persisted past death random_former_concubine = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_former_concubine] = single_alias_right[iteration_random]

### Iterate through all former concubinists. Not persisted past death random_former_concubinist = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_former_concubinist] = single_alias_right[iteration_random]

### Iterate through all former spouses random_former_spouse = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_former_spouse] = single_alias_right[iteration_random]

### Iterate through all councillors that are not related to a skill random_general_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_general_councillor] = single_alias_right[iteration_random]

### Heirs of the scoped character random_heir = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_heir] = single_alias_right[iteration_random]

### Iterate through all landed titles character is heir to random_heir_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_heir_title] = single_alias_right[iteration_random]

### Iterate through all titles the scoped character is heir to random_heir_to_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_heir_to_title] = single_alias_right[iteration_random]

### Iterate through all held landed titles random_held_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_held_title] = single_alias_right[iteration_random]

### Iterate through all hired mercenary companies random_hired_mercenary = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_hired_mercenary] = single_alias_right[iteration_random]

### Iterate through all characters this character has a hook on random_hooked_character = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_hooked_character] = single_alias_right[iteration_random]

### Iterate through anyone the character is hostile to due to their top-liege's realm having been raided random_hostile_raider = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_hostile_raider] = single_alias_right[iteration_random]

### Iterate through all intrigue-based councillors random_intrigue_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_intrigue_councillor] = single_alias_right[iteration_random]

### Iterate through all knights random_knight = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_knight] = single_alias_right[iteration_random]

### Iterate through all secrets known by the character random_known_secret = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_known_secret] = single_alias_right[iteration_random]

### Iterate through all learning-based councillors random_learning_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_learning_councillor] = single_alias_right[iteration_random]

### Iterate through all lieges above a character (skipping the character themselves) random_liege_or_above = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_liege_or_above] = single_alias_right[iteration_random]

### Iterate through all martial-based councillors random_martial_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_martial_councillor] = single_alias_right[iteration_random]

### A sub-realm or realm bordering the scope character's realm (including across water) and has the same rank as the scope character (look for lieges of he owner of the land if necessary) random_neighboring_and_across_water_realm_same_rank_owner = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_neighboring_and_across_water_realm_same_rank_owner] = single_alias_right[iteration_random]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the realm's top title. Can be based on borders a day or two out of date random_neighboring_and_across_water_top_liege_realm = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_neighboring_and_across_water_top_liege_realm] = single_alias_right[iteration_random]

### A realm with a different top liege neighboring the realm of the scope character's top liege (including across water); switches to the holder of the realm. Can be based on borders a day or two out of date random_neighboring_and_across_water_top_liege_realm_owner = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_neighboring_and_across_water_top_liege_realm_owner] = single_alias_right[iteration_random]

### A sub-realm or realm bordering the scope character's realm and has the same rank as the scope character (look for lieges of he owner of the land if necessary) random_neighboring_realm_same_rank_owner = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_neighboring_realm_same_rank_owner] = single_alias_right[iteration_random]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the realm's top title. Can be based on borders a day or two out of date random_neighboring_top_liege_realm = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_neighboring_top_liege_realm] = single_alias_right[iteration_random]

### A realm with a different top liege neighboring the realm of the scope character's top liege; switches to the holder of the realm. Can be based on borders a day or two out of date random_neighboring_top_liege_realm_owner = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_neighboring_top_liege_realm_owner] = single_alias_right[iteration_random]

### Iterate through all owned stories for a character random_owned_story = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_owned_story] = single_alias_right[iteration_random]

### Iterate through all (both) parents random_parent = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_parent] = single_alias_right[iteration_random]

### Iterate through all holy orders that the scoped character is a patron of random_patroned_holy_order = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_patroned_holy_order] = single_alias_right[iteration_random]

### Iterate through characters this player has pinned random_pinned_character = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_pinned_character] = single_alias_right[iteration_random]

### Iterate through characters whose player has this character pinned random_pinning_character = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_pinning_character] = single_alias_right[iteration_random]

### Iterate through player heirs, capped at the first 10 random_player_heir = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_player_heir] = single_alias_right[iteration_random]

### Iterate through all guests visiting the court from the pool (in contrast to foreign_court_guest they don't have a liege) random_pool_guest = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_pool_guest] = single_alias_right[iteration_random]

### Iterate through all potential selectable marriage or betrohed options random_potential_marriage_option = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_potential_marriage_option] = single_alias_right[iteration_random]

### Iterate through all landed titles character is pretender to random_pretender_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_pretender_title] = single_alias_right[iteration_random]

### Iterate through all primary war enemies random_primary_war_enemy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_primary_war_enemy] = single_alias_right[iteration_random]

### Iterate through all prisoners random_prisoner = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_prisoner] = single_alias_right[iteration_random]

### Iterate through all prowess-based councillors random_prowess_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_prowess_councillor] = single_alias_right[iteration_random]

### Iterate through anyone the character is hostile to due to having raided them. Only returns top lieges random_raid_target = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_raid_target] = single_alias_right[iteration_random]

### Iterate through all counties in the realm. Based on top liege  random_realm_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_realm_county] = single_alias_right[iteration_random]

### Iterate through all de jure duchies that have at least one county in the realm. Based on top liege  random_realm_de_jure_duchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_realm_de_jure_duchy] = single_alias_right[iteration_random]

### Iterate through all de jure empire that have at least one county in the realm. Based on top liege  random_realm_de_jure_empire = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_realm_de_jure_empire] = single_alias_right[iteration_random]

### Iterate through all de jure kingdom that have at least one county in the realm. Based on top liege  random_realm_de_jure_kingdom = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_realm_de_jure_kingdom] = single_alias_right[iteration_random]

### Iterate through all realm provinces of a character random_realm_province = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_realm_province] = single_alias_right[iteration_random]

### Iterate through all schemes owned by the character random_scheme = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_scheme] = single_alias_right[iteration_random]

### Iterate through all secrets of the character random_secret = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_secret] = single_alias_right[iteration_random]

### Iterate through all siblings random_sibling = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_sibling] = single_alias_right[iteration_random]

### Iterate through all spouses random_spouse = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_spouse] = single_alias_right[iteration_random]

### Iterate through all the spouse candidates of a character. WARNING: THIS IS VERY SLOW DO NOT DO IT OFTEN. random_spouse_candidate = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_spouse_candidate] = single_alias_right[iteration_random]

### Iterate through all stewardship-based councillors random_stewardship_councillor = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_stewardship_councillor] = single_alias_right[iteration_random]

### Iterate through all baronies in sub-realm random_sub_realm_barony = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_sub_realm_barony] = single_alias_right[iteration_random]

### Iterate through all counties in sub-realm random_sub_realm_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_sub_realm_county] = single_alias_right[iteration_random]

### Iterate through all duchies in sub-realm random_sub_realm_duchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_sub_realm_duchy] = single_alias_right[iteration_random]

### Iterate through all empires in sub-realm random_sub_realm_empire = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_sub_realm_empire] = single_alias_right[iteration_random]

### Iterate through all kingdoms in sub-realm random_sub_realm_kingdom = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_sub_realm_kingdom] = single_alias_right[iteration_random]

### Iterate through all titles in sub-realm random_sub_realm_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_sub_realm_title] = single_alias_right[iteration_random]

### Iterate through all factions targeting the scope character random_targeting_faction = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_targeting_faction] = single_alias_right[iteration_random]

### Iterate through all schemes targeting the character random_targeting_scheme = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_targeting_scheme] = single_alias_right[iteration_random]

### Iterate through all secrets that target the specified scope random_targeting_secret = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_targeting_secret] = single_alias_right[iteration_random]

### Iterate though all characters that should travel with the scoped one (when moving between courts for instance); includes the scoped character random_traveling_family_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_traveling_family_member] = single_alias_right[iteration_random]

### Iterate through all characters that have a truce on this character random_truce_holder = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_truce_holder] = single_alias_right[iteration_random]

### Iterate through all characters this character has a truce on random_truce_target = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_truce_target] = single_alias_right[iteration_random]

### Iterate through all unspent secrets known by the character random_unspent_known_secret = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_unspent_known_secret] = single_alias_right[iteration_random]

### Iterate through all DIRECT vassals random_vassal = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_vassal] = single_alias_right[iteration_random]

### Iterate through ALL vassals, not just direct vassals random_vassal_or_below = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_vassal_or_below] = single_alias_right[iteration_random]

### Iterate through all direct war allies random_war_ally = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_war_ally] = single_alias_right[iteration_random]

### Iterate through all direct war enemies random_war_enemy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_war_enemy] = single_alias_right[iteration_random]

### Iterate through all faction county members every_faction_county_member = { limit = { <triggers> } <effects> }
alias[effect:every_faction_county_member] = single_alias_right[iteration_every]

### Iterate through all faction character members every_faction_member = { limit = { <triggers> } <effects> }
alias[effect:every_faction_member] = single_alias_right[iteration_every]

### Iterate through all faction county members ordered_faction_county_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_faction_county_member] = single_alias_right[iteration_ordered]

### Iterate through all faction character members ordered_faction_member = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_faction_member] = single_alias_right[iteration_ordered]

### Iterate through all faction county members random_faction_county_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_faction_county_member] = single_alias_right[iteration_random]

### Iterate through all faction character members random_faction_member = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_faction_member] = single_alias_right[iteration_random]

### Iterate through all attackers in the war every_war_attacker = { limit = { <triggers> } <effects> }
alias[effect:every_war_attacker] = single_alias_right[iteration_every]

### Iterate through all defenders in the war every_war_defender = { limit = { <triggers> } <effects> }
alias[effect:every_war_defender] = single_alias_right[iteration_every]

### Iterate through all participants in the war every_war_participant = { limit = { <triggers> } <effects> }
alias[effect:every_war_participant] = single_alias_right[iteration_every]

### Iterate through all attackers in the war ordered_war_attacker = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_war_attacker] = single_alias_right[iteration_ordered]

### Iterate through all defenders in the war ordered_war_defender = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_war_defender] = single_alias_right[iteration_ordered]

### Iterate through all participants in the war ordered_war_participant = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_war_participant] = single_alias_right[iteration_ordered]

### Iterate through all attackers in the war random_war_attacker = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_war_attacker] = single_alias_right[iteration_random]

### Iterate through all defenders in the war random_war_defender = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_war_defender] = single_alias_right[iteration_random]

### Iterate through all participants in the war random_war_participant = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_war_participant] = single_alias_right[iteration_random]

### Iterate through all great holy wars this faith is defending against every_defensive_great_holy_wars = { limit = { <triggers> } <effects> }
alias[effect:every_defensive_great_holy_wars] = single_alias_right[iteration_every]

### Iterate through all holy orders of the faith every_faith_holy_order = { limit = { <triggers> } <effects> }
alias[effect:every_faith_holy_order] = single_alias_right[iteration_every]

### Iterate through all holy site baronies of a faith every_holy_site = { limit = { <triggers> } <effects> }
alias[effect:every_holy_site] = single_alias_right[iteration_every]

### Iterate through all great holy wars this faith is defending against ordered_defensive_great_holy_wars = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_defensive_great_holy_wars] = single_alias_right[iteration_ordered]

### Iterate through all holy orders of the faith ordered_faith_holy_order = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_faith_holy_order] = single_alias_right[iteration_ordered]

### Iterate through all holy site baronies of a faith ordered_holy_site = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_holy_site] = single_alias_right[iteration_ordered]

### Iterate through all great holy wars this faith is defending against random_defensive_great_holy_wars = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_defensive_great_holy_wars] = single_alias_right[iteration_random]

### Iterate through all holy orders of the faith random_faith_holy_order = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_faith_holy_order] = single_alias_right[iteration_random]

### Iterate through all holy site baronies of a faith random_holy_site = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_holy_site] = single_alias_right[iteration_random]

### Iterate through all characters who know the secret every_secret_knower = { limit = { <triggers> } <effects> }
alias[effect:every_secret_knower] = single_alias_right[iteration_every]

### Iterate through participants in a secret every_secret_participant = { limit = { <triggers> } <effects> }
alias[effect:every_secret_participant] = single_alias_right[iteration_every]

### Iterate through all characters who know the secret ordered_secret_knower = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_secret_knower] = single_alias_right[iteration_ordered]

### Iterate through participants in a secret ordered_secret_participant = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_secret_participant] = single_alias_right[iteration_ordered]

### Iterate through all characters who know the secret random_secret_knower = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_secret_knower] = single_alias_right[iteration_random]

### Iterate through participants in a secret random_secret_participant = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_secret_participant] = single_alias_right[iteration_random]

### Iterate through all titles leased to a holy order every_leased_title = { limit = { <triggers> } <effects> }
alias[effect:every_leased_title] = single_alias_right[iteration_every]

### Iterate through all titles leased to a holy order ordered_leased_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_leased_title] = single_alias_right[iteration_ordered]

### Iterate through all titles leased to a holy order random_leased_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_leased_title] = single_alias_right[iteration_random]

### Iterate through all characters who declined an activity invite to a specific activity every_activity_declined = { limit = { <triggers> } <effects> }
alias[effect:every_activity_declined] = single_alias_right[iteration_every]

### Iterate through all characters who have unanswered invites to a specific activity every_activity_invited = { limit = { <triggers> } <effects> }
alias[effect:every_activity_invited] = single_alias_right[iteration_every]

### Iterate through all participants in an activity every_participant = { limit = { <triggers> } <effects> }
alias[effect:every_participant] = single_alias_right[iteration_every]

### Iterate through all characters who declined an activity invite to a specific activity ordered_activity_declined = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_activity_declined] = single_alias_right[iteration_ordered]

### Iterate through all characters who have unanswered invites to a specific activity ordered_activity_invited = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_activity_invited] = single_alias_right[iteration_ordered]

### Iterate through all participants in an activity ordered_participant = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_participant] = single_alias_right[iteration_ordered]

### Iterate through all characters who declined an activity invite to a specific activity random_activity_declined = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_activity_declined] = single_alias_right[iteration_random]

### Iterate through all characters who have unanswered invites to a specific activity random_activity_invited = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_activity_invited] = single_alias_right[iteration_random]

### Iterate through all participants in an activity random_participant = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_participant] = single_alias_right[iteration_random]

### Iterate through all casus belli's target titles every_target_title = { limit = { <triggers> } <effects> }
alias[effect:every_target_title] = single_alias_right[iteration_every]

### Iterate through all casus belli's target titles ordered_target_title = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_target_title] = single_alias_right[iteration_ordered]

### Iterate through all casus belli's target titles random_target_title = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_target_title] = single_alias_right[iteration_random]

### Iterate through all baronies in the game every_barony = { limit = { <triggers> } <effects> }
alias[effect:every_barony] = single_alias_right[iteration_every]

### Iterate through all counties in the game every_county = { limit = { <triggers> } <effects> }
alias[effect:every_county] = single_alias_right[iteration_every]

### Iterate through all counties in the region. Put 'region = region_name' inside it every_county_in_region = { limit = { <triggers> } <effects> }
alias[effect:every_county_in_region] = single_alias_right[iteration_every]

### Iterate through all duchies in the game every_duchy = { limit = { <triggers> } <effects> }
alias[effect:every_duchy] = single_alias_right[iteration_every]

### Iterate through all empires in the game every_empire = { limit = { <triggers> } <effects> }
alias[effect:every_empire] = single_alias_right[iteration_every]

### Independent rulers list with a COUNT tier o above every_independent_ruler = { limit = { <triggers> } <effects> }
alias[effect:every_independent_ruler] = single_alias_right[iteration_every]

### Iterate through all kingdoms in the game every_kingdom = { limit = { <triggers> } <effects> }
alias[effect:every_kingdom] = single_alias_right[iteration_every]

### Iterate through all living characters every_living_character = { limit = { <triggers> } <effects> }
alias[effect:every_living_character] = single_alias_right[iteration_every]

### Iterate through all player characters every_player = { limit = { <triggers> } <effects> }
alias[effect:every_player] = single_alias_right[iteration_every]

### Iterate through all characters in the pool of the given province every_pool_character = { limit = { <triggers> } <effects> }
alias[effect:every_pool_character] = single_alias_right[iteration_every]

### Iterate through all provinces (skips non-land and impassable provinces) every_province = { limit = { <triggers> } <effects> }
alias[effect:every_province] = single_alias_right[iteration_every]

### Iterate through all religions in the game every_religion_global = { limit = { <triggers> } <effects> }
alias[effect:every_religion_global] = single_alias_right[iteration_every]

### Rulers list with a COUNT tier o above every_ruler = { limit = { <triggers> } <effects> }
alias[effect:every_ruler] = single_alias_right[iteration_every]

### Iterate through all baronies in the game ordered_barony = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_barony] = single_alias_right[iteration_ordered]

### Iterate through all counties in the game ordered_county = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_county] = single_alias_right[iteration_ordered]

### Iterate through all counties in the region. Put 'region = region_name' inside it ordered_county_in_region = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_county_in_region] = single_alias_right[iteration_ordered]

### Iterate through all duchies in the game ordered_duchy = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_duchy] = single_alias_right[iteration_ordered]

### Iterate through all empires in the game ordered_empire = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_empire] = single_alias_right[iteration_ordered]

### Independent rulers list with a COUNT tier o above ordered_independent_ruler = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_independent_ruler] = single_alias_right[iteration_ordered]

### Iterate through all kingdoms in the game ordered_kingdom = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_kingdom] = single_alias_right[iteration_ordered]

### Iterate through all living characters ordered_living_character = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_living_character] = single_alias_right[iteration_ordered]

### Iterate through all player characters ordered_player = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_player] = single_alias_right[iteration_ordered]

### Iterate through all characters in the pool of the given province ordered_pool_character = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_pool_character] = single_alias_right[iteration_ordered]

### Iterate through all provinces (skips non-land and impassable provinces) ordered_province = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_province] = single_alias_right[iteration_ordered]

### Iterate through all religions in the game ordered_religion_global = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_religion_global] = single_alias_right[iteration_ordered]

### Rulers list with a COUNT tier o above ordered_ruler = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_ruler] = single_alias_right[iteration_ordered]

### Iterate through all baronies in the game random_barony = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_barony] = single_alias_right[iteration_random]

### Iterate through all counties in the game random_county = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_county] = single_alias_right[iteration_random]

### Iterate through all counties in the region. Put 'region = region_name' inside it random_county_in_region = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_county_in_region] = single_alias_right[iteration_random]

### Iterate through all duchies in the game random_duchy = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_duchy] = single_alias_right[iteration_random]

### Iterate through all empires in the game random_empire = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_empire] = single_alias_right[iteration_random]

### Independent rulers list with a COUNT tier o above random_independent_ruler = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_independent_ruler] = single_alias_right[iteration_random]

### Iterate through all kingdoms in the game random_kingdom = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_kingdom] = single_alias_right[iteration_random]

### Iterate through all living characters random_living_character = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_living_character] = single_alias_right[iteration_random]

### Log the current scope to the random log when this effect executes. Only use temprorarily for debugging purposes as it can introduce localized strings into the Scopes._Random log. yes = full scope info, no=only current scope
alias[effect:random_log_scopes] = single_alias_right[iteration_random]

### Iterate through all player characters random_player = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_player] = single_alias_right[iteration_random]

### Iterate through all characters in the pool of the given province random_pool_character = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_pool_character] = single_alias_right[iteration_random]

### Iterate through all provinces (skips non-land and impassable provinces) random_province = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_province] = single_alias_right[iteration_random]

### Iterate through all religions in the game random_religion_global = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_religion_global] = single_alias_right[iteration_random]

### Rulers list with a COUNT tier o above random_ruler = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_ruler] = single_alias_right[iteration_random]

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle) every_side_commander = { limit = { <triggers> } <effects> }
alias[effect:every_side_commander] = single_alias_right[iteration_every]

### Iterate through all knights every_side_knight = { limit = { <triggers> } <effects> }
alias[effect:every_side_knight] = single_alias_right[iteration_every]

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle) ordered_side_commander = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_side_commander] = single_alias_right[iteration_ordered]

### Iterate through all knights ordered_side_knight = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_side_knight] = single_alias_right[iteration_ordered]

### Iterate through all commanders (the commanders of every army on the side, not just the one leading the battle) random_side_commander = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_side_commander] = single_alias_right[iteration_random]

### Iterate through all knights random_side_knight = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_side_knight] = single_alias_right[iteration_random]

### Iterate through all pledged attackers within a great holy war every_pledged_attacker = { limit = { <triggers> } <effects> }
alias[effect:every_pledged_attacker] = single_alias_right[iteration_every]

### Iterate through all pledged defenders within a great holy war every_pledged_defender = { limit = { <triggers> } <effects> }
alias[effect:every_pledged_defender] = single_alias_right[iteration_every]

### Iterate through all pledged attackers within a great holy war ordered_pledged_attacker = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_pledged_attacker] = single_alias_right[iteration_ordered]

### Iterate through all pledged defenders within a great holy war ordered_pledged_defender = { limit = { <triggers> } order_by = script_value position = int min = int max = script_value check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max <effects> }
alias[effect:ordered_pledged_defender] = single_alias_right[iteration_ordered]

### Iterate through all pledged attackers within a great holy war random_pledged_attacker = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_pledged_attacker] = single_alias_right[iteration_random]

### Iterate through all pledged defenders within a great holy war random_pledged_defender = { limit = { <triggers> } (optional) weight = { mtth } <effects> }
alias[effect:random_pledged_defender] = single_alias_right[iteration_random]
